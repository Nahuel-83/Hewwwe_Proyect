Tarefa 1.1
NOME RUTINA: traballadores.sp_actualizar_depEmpregados (procedemento)              
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR: 	- Contar número de empregados que hai en cada departamen-o
						- Actualizar a columna depEmpregados da táboa departamento 
                        co número de empregados que traballan no departamento.
PARAMETROS REQUERIDOS:	- Non precisa parámetros
RESULTADOS PRODUCIDOS:	- Columna depEmpregados actualizada
*/
use traballadores;
delimiter //
create procedure sp_actualizar_depEmpregados()
begin
	update departamento
	  set depEmpregados = (select count(*) 
				   from empregado 
				   where empDepartamento = depNumero);
end
//
delimiter ;

Tarefa 1.2

NOME RUTINA: utilidades.vertaboas (procedemento)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Mostrar información resumida das táboas que hai nun 
				servidor, ou dunha base de datos concreta, tendo en conta a
				información almacenada nas columnas table_schema, ta-ble_name
				table_name, table_type, engine, table_rows da táboa ta-bles
				da base de datos information_schema. Os datos deben saír 
				ordenados polo nome da base de datos, e o nome da táboa.
PARAMETROS REQUERIDOS:	- IN: pBaseDatos se lle poden pasar como valores válidos
				o carácter * que significa que se quere ver información das
				táboas de todas as bases de datos, ou o nome dunha base de 
				datos no caso de querer ver información das táboas dunha 
				base de datos concreta. Calquera outro valor produce unha 
				mensaxe de erro. O tipo de dato do parámetro ten que ser 
				o mesmo que a columna table_schema para poder comparalas.
RESULTADOS PRODUCIDOS:	- Mostrar en pantalla a información solicitada

delimiter //
-- creación do procedemento usando un nome cualificado
create procedure utilidades.vertaboas(pBaseDatos varchar(64) character set utf8) 
begin
  declare existe bit default 0;
  if pBaseDatos='*' then
    select concat(upper(table_schema),'.',lower(table_name)) as `táboa`,
           lower(table_type) as tipo,
           lower(engine) as motor,
           table_rows as filas,
           create_time as data_creacion
    from information_schema.tables
    order by `táboa`;
  else
    select count(*) into existe
      from information_schema.SCHEMATA
      where SCHEMA_NAME=pBaseDatos;  
    if existe = 1 then
        select table_name as `táboa`,
           lower(table_type) as tipo,
           lower(engine) as motor,
           table_rows as filas,
           create_time as data_creacion
        from information_schema.tables
        where table_schema=pBaseDatos
	     order by `táboa`;
    else
        select concat('A base de datos  "',pBaseDatos,'"  non existe') as Error;
	end if;
  end if;
end
//
delimiter ;


Tarefa 1.3

NOME RUTINA: sp_inserir_vendas_proba (procedemento)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Inserir datos de proba na táboa vendas da base de datos
				tendaBD. Os datos para as columnas ven_cliente, ven_tenda e
                        ven_empregado obtéñense buscando unha fila de maneira 
                        aleatoria nas táboas clientes, tendas e empregados, e collendo
                        o código que corresponde. A columna ven_data colle a da-ta do
                        sistema. Para as columnas ven_id e ven_factura non se cargan 
                        datos.
PARAMETROS REQUERIDOS:	- IN: pFilas - Indica o número de filas a inserir.
RESULTADOS PRODUCIDOS:	- Non produce saída en pantalla. Insire na táboa vendas
				filas con datos de proba. O nº de filas que se insiren 
				pásase como un parámetro de entrada.

use tendaBD;
drop procedure if exists sp_inserir_vendas_proba;
delimiter //
create procedure sp_inserir_vendas_proba(pFilas integer)
begin
	declare vCliente, vEmpregado  smallint unsigned;
	declare vTenda tinyint unsigned;
	declare vCcontador tinyint unsigned default 0;
	while vCcontador < pFilas do
		/*seleccionar un empregado aleatoriamente*/
		select emp_id into vEmpregado
			from empregados
			order by rand()
			limit 1;
		/*seleccionar un cliente aleatoriamente*/
		select clt_id into vCliente
			from clientes
			order by rand()
			limit 1;
		/*seleccionar una tenda aleatoriamente*/
		select tda_id into vTenda
			from tendas
			order by rand()
			limit 1;
		/*inserir unha fila na táboa de vendas*/
		insert into vendas (ven_tenda,ven_empregado,ven_cliente,ven_data)
			values (vTenda, vEmpregado, vCliente, now());
		/*contar a fila nserida*/
		set vCcontador = vCcontador + 1;
	end while;
end

//
delimiter ;

Tarefa 1.4

NOME RUTINA: sp_erro_login (procedemento)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Controlar intentos de acceso dos usuarios, comprobando se
				o usuario que intenta acceder está na táboa de usuarios.
				No caso de non existir o usuario na táboa se rexistra a
				información do intento de acceso nunha táboa de rexistro.
				No caso de que un usuario faga máis de 5 intentos errados nos
				últimos 3 minutos se lle bloqueará a súa conta cambiándo-lle o
				password por un valor fixo establecido polo administrador

PARAMETROS REQUERIDOS:	- IN: pLogin: login do usuario.
				- IN: pPassword: contrasinal do usuario
				- OUT: pMensaxe: devolve o valor 0 se o login e  password 
				corresponden a un usuario que existe na táboa de usua-rios, o
				valor 1 se o usuario non existe, e o valor 2 no caso en que 
				se lle cambie á password ao usuario por superar o número de
				intentos permitidos.
RESULTADOS PRODUCIDOS:	- Non mostra nada en pantalla, pero devolve os valores 0,1,2
				no parámetro de saída.
___________________________________________________________________________________
*/
use tendaBD;
drop procedure if exists sp_erro_login;
delimiter //
create procedure sp_erro_login (pUsuario char(16), pPalabra char(40), out pMen-saxe tinyint(1))
begin
  declare vIntentos int;    /*contador de intentos errados nos tres últimos mi-nutos*/
  declare vUsuarioValido boolean default 0; /*vale 1 cando usuario existe na tá-boa*/
  /*Comprobación da existencia do usuario co login e password pasados como pará-metro */
  select count(*) into vUsuarioValido 
	from usuario 
	where login=pUsuario and password=pPalabra;
  /*No caso de que non sexa correcta a conta de usuario rexístrase o intento errado en log_erro_conexion e cóntanse o número de intentos errados nos últimos 3 minutos*/
  if vUsuarioValido = 0  then   /*No caso de non existir o usuario*/
        insert into log_erro_conexion (login, password) values (pUsuario, pPala-bra);
        select count(*) into vIntentos   /*Contar intentos nos últimos 3 minu-tos*/
			from log_erro_conexion 
			where login = pUsuario and timestampdiff(minute,data_hora,now()) <=3;          
        if vIntentos <= 5 then               
               set pMensaxe = 1;       
        else
               set pMensaxe = 2;
               update usuario set password = 'H347B52(((]ERR' where login = pUsuario;
        end if;  
   else     /*No caso de existir o usuario*/
        set pMensaxe = 0;   
  end if; 
end
//
delimiter ;


Tarefa 2.1

NOME RUTINA: mesGalego (función)
DATA CREACIÓN: 
AUTOR:
TAREFA A AUTOMATIZAR:	- Obter o nome do mes en galego partindo do número do mes
PARAMETROS REQUERIDOS:	- Número do mes
RESULTADOS PRODUCIDOS:	- Nome do mes en galego
___________________________________________________________________________________
*/
use utilidades;
drop function if exists mesGalego ;
delimiter //
create function mesGalego(pMes tinyint(2)) returns char(10) 
  deterministic
  begin
    declare vMesLetra char(10) default null;
    case pMes
        when 1 then set vMesLetra="xaneiro";
        when 2 then set vMesLetra="febreiro";
        when 3 then set vMesLetra="marzo";
        when 4 then set vMesLetra="abril";
        when 5 then set vMesLetra="maio";
        when 6 then set vMesLetra="xuño";
        when 7 then set vMesLetra="xullo";
        when 8 then set vMesLetra="agosto";
        when 9 then set vMesLetra="setembro";
        when 10 then set vMesLetra="outubro";
        when 11 then set vMesLetra="novembro";
        when 12 then set vMesLetra="decembro";
    end case;
    return vMesLetra;
  end   
//
delimiter ;

Tarefa 2.2

NOME RUTINA: notaLetra (función)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Obter a nota en forma de texto partindo dunha nota nu-mérica
PARAMETROS REQUERIDOS:	- Cifra de dous enteiros e dous decimais correpondente á nota
RESULTADOS PRODUCIDOS:	- Cadea de 20 carácteres coa nota en forma de texto
___________________________________________________________________________________
*/
use utilidades;
delimiter //
drop function if exists notaLetra //
create function notaLetra(pNota decimal(4,2))  returns char(20) 
deterministic
begin
    declare vTexto char(20);
        if pNota >= 0 and pNota < 5 then set vTexto = 'suspenso';
	      elseif pNota >= 5 and pNota < 6 then set vTexto = 'aprobado'; 	
        elseif pNota >= 6 and pNota < 7 then set vTexto = 'ben'; 
        elseif pNota >= 7 and pNota < 9 then set vTexto = 'notable';
        elseif pNota >= 9 and pNota <= 10 then set vTexto = 'sobresaínte';
        else set vTexto = 'Erro na nota';
    end if;
    return vTexto;
end //
delimiter ;

NOME RUTINA: letraDni (función)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Obter a letra correspondente a un DNI a partir do algo-ritmo
				coñecido como módulo 23
PARAMETROS REQUERIDOS:	- Número enteiro, correspondente ao número dun DNI 
RESULTADOS PRODUCIDOS:	- Cadea de 1 carácter correspondente a letra do DNI
___________________________________________________________________________________
*/
use utilidades;
create function letraDni (pDni integer) returns char(1)
 deterministic
 return substring('TRWAGMYFPDXBNJZSQVHLCKE', pDni % 23 + 1, 1);




–	 Proba do funcionamento da función
select letraDni(33585123);
 	
	Tarefa 2.4.
–	Código da función
/* 
u7a2tarefa0204.sql
___________________________________________________________________________________
NOME RUTINA: letraNIE (función)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Obter a letra correspondente a un NIE a partir do algo-ritmo
				coñecido como módulo 23, engadindo as restricións:
				a) Se a primeira letra é unha X se despreza a primeira letra
				b) Se a primeira letra é unha Y se substitúe polo número 1
				c) Se a primeira letra é unha Z se substitúe polo número 2
				d) Se empeza por calquera outro carácter devolve un cero
PARAMETROS REQUERIDOS:	- Cadea de 8 carácteres, correspondentes a un NIE 
RESULTADOS PRODUCIDOS:	- Cadea de 1 carácter correspondente a letra do NIE ou un 0
___________________________________________________________________________________
*/
use utilidades;
drop function if exists letraNIE;
delimiter //
create function letraNIE(pNIE char(8)) returns char(1) deterministic
  begin
	declare vBase integer;
    case left(pNIE,1)
        when 'X' then set vBase = right(pNIE,7);
        when 'Y' then set vBase = concat('1',right(pNIE,7));
        when 'Z' then set vBase = concat('2',right(pNIE,7));
        else  return '0';
    end case;
        return substring('TRWAGMYFPDXBNJZSQVHLCKE', vBase % 23 + 1, 1);
  end
//
delimiter ;


Tarefa 2.5

NOME RUTINA: calcularIBAN (función)
DATA CREACIÓN: 
AUTOR: 
TAREFA A AUTOMATIZAR:	- Obter o código internacional de conta bancaria (IBAN) para
				contas en España. O algoritmo para o cálculo descríbese no
				documento 'Cálculo de IBAN.pdf'
PARAMETROS REQUERIDOS:	- Cadea de 20 carácteres que identifican unha conta ban-caria
				- Cadea de dous carácteres co código do país: ES - España
RESULTADOS PRODUCIDOS:	- Cadea de 25 carácter correspondente ao IBAN da conta

use utilidades;
drop function if exists calcularIBAN;
delimiter //
create function calcularIBAN(pCCC char(20), pPais char(2)) returns char(25) charset latin1
    deterministic
begin
	declare vBase decimal(30,0);
	declare vControl tinyint(2) zerofill;
	set vBase = concat(pCCC,locate(left(pPais,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ')+9,
			    locate(right(pPais,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ')+9,'00');
	set vControl = 98 - vBase % 97;
	return concat(pPais,vControl,' ',pCCC);
  end
//
delimiter ;



